{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\broadcasting channel\\\\client\\\\broadcasting\\\\src\\\\pages\\\\p_to_p.js\",\n  _s = $RefreshSig$();\nimport '../utilities/p_to_p.css';\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket = io('http://localhost:3001', {\n  transports: ['websocket']\n});\nexport default function PersonToPerson(props) {\n  _s();\n  const [sendMessage, SetsendMessage] = useState('');\n  const [receiveMessage, SetreceiveMessage] = useState([]);\n  const data = props.data;\n  if (data.room_id !== '') {\n    socket.emit('join_room', data.room_id);\n  }\n  const sendMessages = async () => {\n    const messages = {\n      room_id: data.room_id,\n      username: data.username,\n      message: sendMessage\n    };\n    await socket.emit(\"send_messages\", messages);\n    SetreceiveMessage(prev => [...receiveMessage, prev]);\n    sendMessage(\"\");\n  };\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageReceived(prevMessages => [...prevMessages, data]);\n    });\n    return () => {\n      socket.off(\"receive_message\");\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_display\",\n        children: receiveMessage.map(msg => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.message\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"message_input\",\n          placeholder: \"MESSAGE...\",\n          onChange: e => {\n            SetsendMessage(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send_msg\",\n          onClick: sendMessages,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(PersonToPerson, \"SVZ1T4EL5NnsIGKI9RUb+EmkYk4=\");\n_c = PersonToPerson;\nvar _c;\n$RefreshReg$(_c, \"PersonToPerson\");","map":{"version":3,"names":["io","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","transports","PersonToPerson","props","_s","sendMessage","SetsendMessage","receiveMessage","SetreceiveMessage","data","room_id","emit","sendMessages","messages","username","message","prev","on","setMessageReceived","prevMessages","off","className","children","map","msg","id","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["D:/project/broadcasting channel/client/broadcasting/src/pages/p_to_p.js"],"sourcesContent":["import '../utilities/p_to_p.css';\r\nimport {io} from 'socket.io-client';\r\nimport {useState, useEffect} from 'react'\r\n\r\nvar socket = io('http://localhost:3001', { transports : ['websocket'] });\r\n\r\nexport default function PersonToPerson (props){\r\n\r\n    const [sendMessage, SetsendMessage] = useState('');\r\n    const [receiveMessage, SetreceiveMessage] = useState([]);\r\n    const data = props.data\r\n\r\n    if(data.room_id !== ''){\r\n        socket.emit('join_room', data.room_id);\r\n    }\r\n\r\n    const sendMessages = async () => {\r\n\r\n        const messages = {\r\n            room_id: data.room_id,\r\n            username: data.username,\r\n            message: sendMessage\r\n        }\r\n\r\n        await socket.emit(\"send_messages\", messages);\r\n        SetreceiveMessage(prev => [...receiveMessage, prev])\r\n        sendMessage(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n          setMessageReceived(prevMessages => [...prevMessages, data]);\r\n        });\r\n        return () => {\r\n          socket.off(\"receive_message\");\r\n      };\r\n      }, [socket]);\r\n\r\n    return(\r\n        <div className=\"main_container\">\r\n            <div className=\"message_container\">\r\n                <div className=\"message_display\">\r\n                    {receiveMessage.map((msg) => {\r\n                        return(\r\n                            <>\r\n                            <p key={msg.id}>{msg.message}</p>\r\n                            </>\r\n                        )\r\n                    })}\r\n                </div>\r\n            <div className=\"message_footer\">\r\n                <input className=\"message_input\" placeholder=\"MESSAGE...\" onChange={(e) => {SetsendMessage(e.target.value)}} />\r\n                <button className='send_msg' onClick={sendMessages}>Send</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}